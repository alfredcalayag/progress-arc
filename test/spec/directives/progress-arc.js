// Generated by CoffeeScript 1.10.0
'use strict';
describe('Directive: progressArc', function() {
  var scope;
  beforeEach(module('progressArcApp'));
  scope = {};
  beforeEach(inject(function($controller, $rootScope) {
    return scope = $rootScope.$new();
  }));
  return describe('progressArc Directive', function() {
    describe('Renders with with valid inputs', function() {
      var element;
      element = void 0;
      beforeEach(inject(function($compile) {
        element = angular.element('<progress-arc actual=0.5 expected=1></progress-arc>');
        return element = $compile(element)(scope);
      }));
      it('should render a svg with valid inputs', function() {
        return expect(element.find('svg').length).toEqual(1);
      });
      it('should render a text with a class "value"', function() {
        return expect(element[0].querySelector('text.value')).toBeDefined();
      });
      it('should render a text with a class "format" displaying "%"', function() {
        return expect(element[0].querySelector('text.format').textContent).toEqual('%');
      });
      it('should render a text with a class "label"', function() {
        return expect(element[0].querySelector('text.label')).toBeDefined();
      });
      it('should render the actual arc path with a class "path-actual"', function() {
        return expect(element[0].querySelector('path.path-actual')).toBeDefined();
      });
      return it('should render the actual arc path with a class "path-expected"', function() {
        return expect(element[0].querySelector('path.path-expected')).toBeDefined();
      });
    });
    return describe('Does NOT render with invalid inputs', function() {
      it('should NOT render a svg if a String input is attempted', inject(function($compile) {
        var element;
        element = angular.element('<progress-arc actual="invalidInput" expected=0.5></progress-arc>');
        element = $compile(element)(scope);
        expect(element.find('svg').length).toEqual(0);
        element = angular.element('<progress-arc actual="0.5" expected="invalidInput"></progress-arc>');
        element = $compile(element)(scope);
        return expect(element.find('svg').length).toEqual(0);
      }));
      it('should NOT render a svg if an invalid number input is attempted', inject(function($compile) {
        var element;
        element = angular.element('<progress-arc actual=-1 expected=0.1></progress-arc>');
        element = $compile(element)(scope);
        expect(element.find('svg').length).toEqual(0);
        element = angular.element('<progress-arc actual=1.1 expected=0.1></progress-arc>');
        element = $compile(element)(scope);
        return expect(element.find('svg').length).toEqual(0);
      }));
      return it('should NOT render a svg if a required input is missing', inject(function($compile) {
        var element;
        element = angular.element('<progress-arc actual=undefined expected=0.1></progress-arc>');
        element = $compile(element)(scope);
        expect(element.find('svg').length).toEqual(0);
        element = angular.element('<progress-arc expected=0.1></progress-arc>');
        element = $compile(element)(scope);
        return expect(element.find('svg').length).toEqual(0);
      }));
    });
  });
});
